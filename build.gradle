//file:noinspection GroovyAssignabilityCheck
plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
	id 'signing'
}

def ENV = System.getenv()
def publishType = System.getenv("PUBLISH_TYPE")

version = "${project.mod_version}+${project.minecraft_version}"

if (publishType == "SNAPSHOT") {
	version = "${project.mod_version}+${project.minecraft_version}-SNAPSHOT"
}

group = project.maven_group

loom {
	splitEnvironmentSourceSets()
	accessWidenerPath = file("src/main/resources/adventure_core.accesswidener")

	mods {
		"adventure_core" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

repositories {
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
	exclusiveContent {
		forRepository {
			maven { name = "Modrinth"; url = "https://api.modrinth.com/maven" }
		}
		filter { includeGroup "maven.modrinth" }
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	// modImplementation "net.rotgruengelb:quirl:${project.quirl_version}"
	include(implementation(annotationProcessor("net.rotgruengelb:nixienaut:${project.nixienaut_version}")))
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.2")))
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft_version", project.minecraft_version
	inputs.property "loader_version", project.loader_version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"minecraft_version": project.minecraft_version,
				"loader_version": project.loader_version,
				"quirl_version": project.quirl_version
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	withSourcesJar()
	withJavadocJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = project.maven_group
			artifactId = 'sip'
			version = "${version}"
			from components.java

			pom {
				name = 'Sip'
				description = 'A Minecraft FabricMC mod about (mostly hot) drinks.'
				url = 'https://github.com/rotgruengelb/sip'
				licenses {
					license {
						name = 'MIT License'
						url = 'https://opensource.org/license/MIT'
					}
				}
				developers {
					developer {
						id = 'rotgruengelb'
						name = 'Daniel (aka. rotgruengelb)'
						email = 'rotgrungelblab@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/rotgruengelb/sip.git'
					developerConnection = 'scm:git:ssh://github.com/rotgruengelb/siÃ¼.git'
					url = 'https://github.com/rotgruengelb/sip/'
				}
			}
		}
	}

	repositories {
		maven {
			name = "OSSRH"
			url = System.getenv("OSSRH_URL")
			credentials {
				username = System.getenv("OSSRH_USERNAME")
				password = System.getenv("OSSRH_PASSWORD")
			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}


javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

sourceSets {
	main {
		resources {
			srcDirs += ['src/main/generated']
		}
	}
}
